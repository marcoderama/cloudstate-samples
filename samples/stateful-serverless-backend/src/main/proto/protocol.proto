// Hypothetical event sourced function protocol
// This would be provided by the framework, and event sourced functions would be expected to implement this gRPC
// interface, while the framework would be a client of it.
syntax = "proto3";

// Any is used so that domain events defined according to the functions business domain can be embedded inside
// the protocol.
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";

package com.lightbend.statefulserverless.grpc;

// The init message. This will always be the first message sent to the entity when
// it is loaded.
message Init {

    // The ID of the entity.
    string entity_id = 1;

    // If present the entity should initialise its state using this snapshot.
    Snapshot snapshot = 2;
}

// A snapshot
message Snapshot {

    // The sequence number when the snapshot was taken.
    int64 snapshot_sequence = 1;

    // The snapshot.
    google.protobuf.Any snapshot = 2;
}

// An event. These will be sent to the entity when the entity starts up.
message Event {

    // The sequence number of the event.
    int64 sequence = 1;

    // The event payload.
    google.protobuf.Any payload = 2;
}

// A command. For each command received, a reply must be sent with a matching command id.
message Command {

    // A command id.
    int64 id = 1;

    // Command name
    string name = 2;

    // The command payload.
    google.protobuf.Any payload = 3;
}

// A reply to a command.
message Reply {

    // The id of the command being replied to. Must match the input command.
    int64 command_id = 1;

    // The reply payload
    google.protobuf.Any payload = 2;

    // A list of events to persist - these will be persisted before the reply
    // is sent.
    repeated google.protobuf.Any events = 3;

    // An optional snapshot to persist. It is assumed that this snapshot will have
    // the state of any events in the events field applied to it. It is illegal to
    // send a snapshot without sending any events.
    google.protobuf.Any snapshot = 4;
}

// A failure reply. If this is returned, it will be translated into a gRPC unknown
// error with the corresponding description if supplied.
message Failure {

    // The id of the command being replied to. Must match the input command.
    int64 command_id = 1;

    // A description of the error.
    string description = 2;
}

// Input message type for the gRPC stream in.
message EntityStreamIn {
    oneof message {
        Init init = 1;
        Event event = 2;
        Command command = 3;
    }
}

// Output message type for the gRPC stream out.
message EntityStreamOut {
    oneof message {
        Reply reply = 1;
        Failure failure = 2;
    }
}

message EntitySpec {
    // FIXME How do we generate this code? protoc --descriptor_set_out ?
    google.protobuf.FileDescriptorProto proto = 1;
    string service_name = 2;
}

// The Entity service
service Entity {

    // The stream. One stream will be established per active entity.
    // Once established, the first message sent will be Init, which contains the entity ID, and,
    // if the entity has previously persisted a snapshot, it will contain that snapshot. It will
    // then send zero to many event messages, one for each event previously persisted. The entity
    // is expected to apply these to its state in a deterministic fashion. Once all the events
    // are sent, one to many commands are sent, with new commands being sent as new requests for
    // the entity come in. The entity is expected to reply to each command with exactly one reply
    // message. The entity should reply in order, and any events that the entity requests to be
    // persisted the entity should handle itself, applying them to its own state, as if they had
    // arrived as events when the event stream was being replayed on load.
    rpc handle(stream EntityStreamIn) returns (stream EntityStreamOut) {}

    // Readiness check. When the entity service is ready to start receiving commands, it should
    // return true from this call, otherwise it should return false.
    rpc ready(google.protobuf.Empty) returns (EntitySpec) {}
}
